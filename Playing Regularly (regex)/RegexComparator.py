#-------------------------------------------------------------------------------
# Name:        RegexComparator
# Purpose:     Solution to the problem posed by Anhad Jai Singh on dinner table,
#              to create an automatic generator that gives a regex for all
#              integers n, which accepts only those number(digit sequences)
#              larger than n
#
# Author:      particle.mania
#
# Created:     23-03-2013
# Copyright:   (c) particle.mania 2013
# Licence:     DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE (WTFPL) 2.0
#-------------------------------------------------------------------------------
#!/usr/bin/env python

from re import *

#Scott: RE -> (Str -> Bool)
Scott = lambda regex: lambda inpt: (
                                    compile(regex).match(inpt).group(0) == inpt
                                    ) if (
                                            compile(regex).match(inpt) != None
                                    ) else 1==0
#Scott(expr)(string)==True iff DFA generated by expr accepts string


#Digit Space in order
#Can be extended to arbitrary numeric-bases
D = "0123456789"
#Val: char -> int
Val = lambda c: int(c)
#D[Val(c)]==c for all c in D


#String Manipulation and Regex Genration Functions
ClozeSq = lambda s: "["+s+"]"

ClozeR = lambda s: "("+s+")"

Dlimit = lambda t: ClozeSq(D) + "{" + str(t) + ",}"

CleanZeroes = lambda s: s if s[0]!=D[0] else CleanZeroes(s[1:])

#Solution Functions
#s is Strnum iff s is some numeral representation in base len(D)
#Anhad: Strnum -> RE
Anhad = lambda num: ClozeR(
                            ClozeR(
                                    ClozeSq(D[:Val(num[0])])
                                    + Dlimit(len(num)))
                            + "|"
                            + ClozeR(
                                    num[0]
                                    + Anhad(num[1:]))
                            + "|"
                            + ClozeR(
                                    ClozeSq(D[Val(num[0])+1:])
                                    + Dlimit(len(num)-1))
                    )if len(num)>0 else ClozeSq(D)+"*"

#JaiSingh: Strnum -> RE
#takes care of leading zeroes
JaiSingh = lambda num: (D[0]+"*"
                        + ClozeR(
                                ClozeR(
                                        ClozeSq(D[1:Val(num[0])])
                                        + Dlimit(len(num)))
                                + "|"
                                + ClozeR(
                                        num[0]
                                        + Anhad(num[1:]))
                                + "|"
                                + ClozeR(
                                        ClozeSq(D[Val(num[0])+1:])
                                        + Dlimit(len(num)-1)))
                        ) if len(num)>0 else ClozeSq(D)+"*"

#Scott(JaiSingh(str(p)))(str(q)) iff q>=p and str(p) is free of leading zeroes

#DFA Generator
KleeneComparator = lambda s: Scott(JaiSingh(CleanZeroes(s)))